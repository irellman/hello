{"version":3,"file":"static/js/552.60e2c6d8.chunk.js","mappings":"0RAkDA,EA3CsB,SAACA,GACrB,IAAMC,GAAWC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,mBACzCC,GAAYC,EAAAA,EAAAA,UACZC,GAAWC,EAAAA,EAAAA,KACTC,EAAeL,EAAAA,EAAAA,QAAAA,WACvB,GAAwBM,EAAAA,EAAAA,UAAiB,GAAzC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsCF,EAAAA,EAAAA,WAAkB,GAAxD,eAAOG,EAAP,KAAoBC,EAApB,KACMC,GAAcT,EAAAA,EAAAA,UAEpB,GAA6CU,EAAAA,EAAAA,IAAW,iBAAC,+GACrCC,EAAAA,EAAAA,IAAYC,OAAOlB,GAAKW,GADa,OACjDQ,EADiD,OAEjDC,EAAOD,EAAIC,KAFsC,UAItCA,EAAKnB,UAJiC,IAIvD,2BAASoB,EAAuB,QACxBC,GADwB,kBAEzBD,GAFyB,IAG5BE,iBAAiB,IAGnBhB,EAASE,EAAWa,IAViC,8BAalDF,EAAKP,aACRC,GAAe,GAdsC,4CAAzD,eAAOU,EAAP,KAAmBC,EAAnB,UA0BA,OARAC,EAAAA,EAAAA,GAAYX,EAAaU,EAAYZ,GAAa,WAChDD,GAAQ,SAAAe,GAAI,OAAIA,EAAO,SAGzBC,EAAAA,EAAAA,YAAU,WACRJ,MACC,CAACb,IAEG,CACLV,SAAAA,EACAI,UAAAA,EACAQ,YAAAA,EACAE,YAAAA,IC7CJ,GAAgB,UAAY,6B,mBCMtBc,EAAUC,EAAAA,MAAW,kBAAM,iCCLjC,EDgB4B,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB/B,GAAOgC,EAAAA,EAAAA,MAAPhC,GACR,EAKIiC,EAAcf,OAAOlB,IAJvBC,EADF,EACEA,SACAI,EAFF,EAEEA,UACAQ,EAHF,EAGEA,YACAE,EAJF,EAIEA,YAGImB,EAAS,SAAClC,EAAYmC,GAC1BJ,EAAY,CACV/B,GAAIA,EACJmC,SAAUA,KAId,OACElC,EAASmC,QACP,+BACE,iBAAKC,UAAWC,EAAAA,UAAkBC,IAAKlC,EAAvC,UACGJ,EAASuC,KAAI,SAAClB,EAAkBmB,GAC/B,OAAO,SAACZ,EAAD,CACLP,QAASA,EACToB,SAAUR,GACLO,MAGR5B,GAAeZ,EAASmC,OAAS,IAChC,gBAAKC,UAAWC,EAAAA,OAAeC,IAAKxB,EAApC,UACE,SAAC4B,EAAA,EAAD,YAMR","sources":["components/Post/Comments/CommentsLogic.tsx","webpack://frontend/./src/components/Post/Comments/Comments.module.scss?d496","components/Post/Comments/Comments.tsx","components/Post/Comments/index.ts"],"sourcesContent":["import {useAppDispatch, useAppSelector} from \"hooks/redux\";\nimport {useEffect, useRef, useState} from \"react\";\nimport {commentsReducer} from \"context/commentsReducer\";\nimport {getComments} from \"api/comment\";\nimport useFetching from \"hooks/useFetching\";\nimport useObserver from \"hooks/useObserver\";\n\nconst CommentsLogic = (id: number) => {\n  const comments = useAppSelector(state => state.commentsReducer);\n  const container = useRef<any>();\n  const dispatch = useAppDispatch();\n  const { addComment } = commentsReducer.actions;\n  const [page, setPage] = useState<number>(0);\n  const [hasNextPage, setHasNextPage] = useState<boolean>(true);\n  const lastElement = useRef<any>();\n\n  const [fetchPosts, isFetching, error]: any = useFetching(async () => {\n    const res = await getComments(Number(id), page);\n    const data = res.data;\n\n    for (let item of data.comments) {\n      const comment = {\n        ...item,\n        isShowedAnswers: false\n      }\n\n      dispatch(addComment(comment));\n    }\n\n    if (!data.hasNextPage) {\n      setHasNextPage(false);\n    }\n  });\n\n  useObserver(lastElement, isFetching, hasNextPage, () => {\n    setPage(prev => prev + 1);\n  });\n\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n\n  return {\n    comments,\n    container,\n    hasNextPage,\n    lastElement\n  }\n}\n\nexport default CommentsLogic;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Comments_container__BoKcu\"};","import React, {FC, useRef} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { comment } from \"types/comment\";\nimport CommentsLogic from \"./CommentsLogic\";\nimport styles from \"./Comments.module.scss\";\nimport {LoaderIcon} from \"components/icons/LoaderIcon\";\n\nconst Comment = React.lazy(() => import(\"./Comment\"));\n\ninterface answerTo {\n  id: number,\n  username: string\n}\n\ninterface props {\n  setAnswerTo: (value: answerTo) => void\n}\n\nconst Comments: FC<props> = ({ setAnswerTo }) => {\n  const { id } = useParams();\n  const {\n    comments,\n    container,\n    hasNextPage,\n    lastElement\n  } = CommentsLogic(Number(id));\n\n  const answer = (id: number, username: string) => {\n    setAnswerTo({\n      id: id,\n      username: username\n    });\n  }\n\n  return (\n    comments.length ?\n      <>\n        <div className={styles.container} ref={container}>\n          {comments.map((comment: comment, index: number) => {\n            return <Comment\n              comment={comment}\n              onAnswer={answer}\n              key={index}\n            />\n          })}\n          {hasNextPage && comments.length > 0 &&\n            <div className={styles.loader} ref={lastElement}>\n              <LoaderIcon />\n            </div>\n          }\n        </div>\n      </>\n    :\n      <></>\n  );\n}\n\nexport default Comments;\n","import Comments from \"./Comments\";\n\nexport default Comments;"],"names":["id","comments","useAppSelector","state","commentsReducer","container","useRef","dispatch","useAppDispatch","addComment","useState","page","setPage","hasNextPage","setHasNextPage","lastElement","useFetching","getComments","Number","res","data","item","comment","isShowedAnswers","fetchPosts","isFetching","useObserver","prev","useEffect","Comment","React","setAnswerTo","useParams","CommentsLogic","answer","username","length","className","styles","ref","map","index","onAnswer","LoaderIcon"],"sourceRoot":""}